
@{
    ViewData["Title"] = "Index";
    Layout = "_Layout";
}

<div class="row">
    <div class="col">
        <div class="card" style="margin: 20px;">
            <div class="card-body">
                <h5 class="card-title">Capitulo 1: Controlando el flujo de un programa</h5>
                <h6 class="card-subtitle mb-2 text-muted">Tema 1: Implementando multihilos y procesamiento asincrono</h6>
                <hr>
                <p class="card-text">
                    <h5>La librería <code>Task Parallel</code></h5>
                    <ul>
                        <li>Una tarea puede ser ejecutada concurrentemente con otras tareas, es decir, en el mismo momento.</li>
                        <li>La librería <code>Task Parallel</code> nos proporciona un rago de recursos que nos permite utililzar tareas en una aplicación.</li>
                        <li>
                            La clase <code>Task.Parallel</code> nos proporciona tres metodos que pueden ser utilizados para crear aplicaciones que contengan tareas
                            las cuales se ejecutan de forma paralela, es decier, al mismo tiempo.
                        </li>
                    </ul>
                    <h6>Parallel.Invoke</h6>
                    <ul>
                        <li>
                            La clase <code>Task.Parallel</code> se encuentra en el espacio de nombres <code>System.Threading.Tasks</code>.
                        </li>
                        <li>
                            El método <code>Parallel.Invoke</code> acepta como parametro un numero N de delegados tipo <code>Action</code> y su función es crear una tarea para cada uno de ellos.
                        </li>
                        <li>
                            Un delegado de tipo <code>Action</code> es la encapsulación de un método que no acepta parametros y que a su vez o regresa ningún resultado. Es decir, es un método de tipo <code>void</code>.
                            Igualmente, este delegado puede ser reemplazado por una expresión lambda.
                        </li>
                        <br />
                        <span class="badge badge-secondary"> Listado 1-1</span>&nbsp;Uso de
                        <code>Parallel.Invoke</code>
                        <hr>
<pre>
using System;
using System.Threading.Tasks;
using System.Threading;

namespace Listing_1._1Parallel_Invoke
{
    class Program {
        static void Main(string[] args) {
                        <b>Parallel.Invoke(()=>Task1(), ()=>Task2());</b>
            Console.WriteLine("Finished processing. Press a key to end.");
            Console.ReadKey();
        }
        
        static void Task1() {
            Console.WriteLine("Task 1 starting");
            Thread.Sleep(2000);
            Console.WriteLine("Task 1 ending");
        }
            
        static void Task2() {
            Console.WriteLine("Task 2 starting");
            Thread.Sleep(1000);
            Console.WriteLine("Task 2 ending");
        }
    }
}
</pre>
                        <video width="600" height="400" controls
                            <source src="~/videos/capitulo01/tema01/seccion01/parallel.invoke.mp4" type="video/mp4">
                            Your browser does not support the video tag.
                        </video>
                        <br />
                        <br />
                        <li>
                            El método <code>Parallel.Invoke</code> puede iniciar una gran cantidad de tareas para ejecutarse simultaneamente,
                            sin embargo, nosotros no tendremos el control respecto al órden con las que las tareas se ejecutan así como el procesador
                            de la computadora que ejecuta dichas tareas.
                        </li>
                        <li>
                            La ejecución del metodo <code>Parallel.Invoke</code> finaliza cuando todas las tareas a ejecutar han sido completadas.
                        </li>
                    </ul>
                    <h6>Parallel.ForEach</h6>
                    <ul>
                        <li>
                            La clase <code>Task.Parallel</code> nos proporciona un metodo llamado <code>Parallel.ForEach</code> el cual
                            resulta ser la emplementación de un bucle <code>foreach</code> el cual ejecuta de manera paralela cada uno de sus ciclos.
                        </li>
                        <br />
                        <span class="badge badge-secondary">Listado 1-2</span>&nbsp;Uso de
                        <code>Parallel.ForEach</code>
                        <hr>
<pre>
using System;
using System.Threading.Tasks;
using System.Threading;

namespace Listing_1._2Parallel_ForEach
{
    class Program {
        static void WorkOnItem(object item)
        {
            Console.WriteLine("Started working on: " + item);
            Thread.Sleep(100);
            Console.WriteLine("Finished working on: " + item);
        }
        
        static void Main(string[] args)
        {
                        <b>var items = Enumerable.Range(0, 500);
            Parallel.ForEach(items, item =>
            {
                WorkOnItem(item);
            });</b>
            
            Console.WriteLine("Finished processing. Press a key to end.");
            Console.ReadKey();
        }
    }
}
</pre>
                        <video width="600" height="400" controls>
                            <source src="~/videos/capitulo01/tema01/seccion01/parallel.foreach.mp4" type="video/mp4">
                            Your browser does not support the video tag.
                        </video>
                        <br />
                        <br />
                        <li>
                            El método <code>Parallel.ForEach</code> acepta dos parametros, el primer parametro debe ser una coleccion
                            que implemente la interfaz <code>IEnumerable</code>. En el segundo parametro deberemos proporcionar la accion a
                            ejecutar por cada uno de los distintos items de la colección, esta accion puede ser representada por un delegado o
                            una expresión lambda.
                        </li>
                        <li>
                            Al igual que <code>Parallel.Invoke</code>, <code>Parallel.ForEach</code> no tiene el control respecto al órden de ejecución
                            de las tareas a ejecutar.
                        </li>
                    </ul>
                    <h6>Parallel.For</h6>
                    <ul>
                        <li>
                            El método <code>Parallel.For</code> puede ser utilizada para paralelizar la ejecición de un bucle <code>for</code> el cual
                            es controlado por una variale.
                        </li>
                        <br />
                        <span class="badge badge-secondary">Listado 1-3</span>&nbsp;Uso de
                        <code>Parallel.For</code>
                        <hr>
<pre>
using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

namespace Listing_1._3Parallel_For
{
    class Program
    {
        static void WorkOnItem(object item)
        {
            Console.WriteLine("Started working on: " + item);
            Thread.Sleep(100);
            Console.WriteLine("Finished working on: " + item);
        }

        static void Main(string[] args)
        {
            var items = Enumerable.Range(0, 500).ToArray();
            Parallel.For(0, items.Length, i =>
            {
                WorkOnItem(items[i]);
            });
            Console.WriteLine("Finished processing. Press a key to end.");
            Console.ReadKey();
        }
    }
}
</pre>
                        <video width="600" height="400" controls>
                            <source src="~/videos/capitulo01/tema01/seccion01/parallel.for.mp4" type="video/mp4">
                            Your browser does not support the video tag.
                        </video>
                        <br />
                        <br />
                        <li>
                            El primer parametro del método ser refiere al valor de inicio del contador, en el ejemplo anterior, este valor es cero.
                        </li>
                        <li>
                            El segundo parametro del método corresponde al máximo valor que deberá alcanzar el bucle <code>for</code>.
                        </li>
                        <li>
                            El tercer parametro es la acción a ejecutar, en el ejemplo anterior, esta acción es representada por una expresion lambda,
                            en este ejemplo, el resultado será similar al ejemplo del listado 1-2.
                        </li>
                    </ul>
                    <h6>Manejando <code>Parallel.For</code> y <code>Parallel.ForEach</code></h6>
                    <ul>
                        <li>
                            La expresion lambda que se ejecuta en cada iteración puede ser provista con un parametro adicional de tipo <code>ParallelLoopState</code>.
                        </li>
                        <li>
                            Los metodos <code>Parallel.For</code> y <code>Parallel.ForEach</code> retornan un valor de tipo <code>ParallelLoopResult</code> el cual puede
                            ser utilizado poara determinar si la ejecución de un bucle finalizó correctaente.
                        </li>
                        <br />
                        <span class="badge badge-secondary">Listado 1-4</span>&nbsp;Manejo de
                        <code>Parallel.For</code>
                        <hr>
<pre>
using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

namespace Listing_1._4Managing_Parallel_For
{
    class Program
    {
        static void WorkOnItem(object item)
        {
            Console.WriteLine("Started working on: " + item);
            Thread.Sleep(100);
            Console.WriteLine("Finished working on: " + item);
        }

        static void Main(string[] args)
        {
            var items = Enumerable.Range(0, 500).ToArray();
            ParallelLoopResult result = 
                Parallel.For(0, items.Count(), (int i, ParallelLoopState loopState) =>
            {
                        <b>if (i == 200) loopState.Break();</b>
                WorkOnItem(items[i]);
            });

            Console.WriteLine("Completed: " + result.IsCompleted);
            Console.WriteLine("Items: " + result.LowestBreakIteration);
            Console.WriteLine("Finished processing. Press a key to end.");

            Console.ReadKey();
        }
    }
}
</pre>
                        <video width="600" height="400" controls>
                            <source src="~/videos/capitulo01/tema01/seccion01/managing.parallel.for.mp4" type="video/mp4">
                            Your browser does not support the video tag.
                        </video>
                        <br />
                        <br />
                        <li>
                            Como podemos observar en el ejemplo antgerior, el código en la expresión lambda revisa el número
                            del item (el cual tiene valores entre 0 y 500). Si el número de item es 200, el código llama al método
                            <code>Stop</code> de la variable <code>loopState</code>.
                        </li>
                        <li>
                            Note que lo debido a que (como se explicó anteriormente) el bucle <code>For</code> no puede controlar el órden
                            con el que los procesadores de la computadora ejecutarán cada uno de las iteraciónes, el orden de ejecución
                            es "tecnicamente" aleatorio.
                        </li>
                        <li>
                            Note que a pesar que en el código se llama el metodo <code>Stop</code>, esto no quiere decir que el iterador
                            detendrá instantaneamente todos las iteraciones en ejecución.
                        </li>
                        <li>
                            De igual manera, el llamar al metodo <code>Stop</code> no significa que items con valores mayores a 200 no serán
                            ejecutados, esto es debido a que no existe garantía que el número 200 esté dentro de los valores de la iteración.
                        </li>
                        <li>
                            Las iteraciones puden ser finalizadas llamando los métodos <code>Stop</code> o <code>Break</code> de la variable de tiempo
                            <code>ParallelLoopState</code>.
                        </li>
                        <li>
                            Si utilizamos <code>Stop</code> para detener el ciclo durante la iteración 200, es posible que algunas iteraciones
                            con un índice o item menor a 200 no sean ejecutadas.
                        </li>
                        <li>
                            Si utilizamos <code>Break</code> para finalizar la iteración del ciclo, garantizaremos que todas las iteraciones con un
                            índice menor a 200 serán ejecutadas antes de que finalice el ciclo.
                        </li>
                        <video width="600" height="400" controls>
                            <source src="~/videos/capitulo01/tema01/seccion01/manaje.parallelFor.break.mp4" type="video/mp4">
                            Your browser does not support the video tag.
                        </video>
                        <br />
                    </ul>
                    <h5>La librería <code>Parallel LINQ</code></h5>
                    <ul>
                        <li>
                            <code>Parallel Language-Integrated Query</code> (PLINQ) puede ser utilizado para ejecutar elementos de querys
                            de forma paralela.
                        </li>
                        <br />
                        <span class="badge badge-secondary">Listado 1-5</span>&nbsp;Ejemplo de un query con
                        <code>PLINQ</code>
                        <hr>
<pre>
using System;
using System.Linq;

namespace LISTING_1_5_A_parallel_LINQ_query
{
    class Program
    {
        class Person
        {
            public string Name { get; set; }
            public string City { get; set; }
        }

        static void Main(string[] args)
        {
            Person[] people = new Person[]
            {
                new Person { Name = "Alan", City = "Hull" },
                new Person { Name = "Beryl", City = "Seattle" },
                new Person { Name = "Charles", City = "London" },
                new Person { Name = "David", City = "Seattle" },
                new Person { Name = "Eddy", City = "Paris" },
                new Person { Name = "Fred", City = "Berlin" },
                new Person { Name = "Gordon", City = "Hull" },
                new Person { Name = "Henry", City = "Seattle" },
                new Person { Name = "Isaac", City = "Seattle" },
                new Person { Name = "James", City = "London" }
            };

                        <b>var result = from person in people.AsParallel()
                            where person.City == "Seattle"
                            select person;</b>

            foreach (var person in result)
                Console.WriteLine(person.Name);

            Console.WriteLine("Finished processing. Press a key to end.");
            Console.ReadKey();
        }
    }
}
</pre>
                        <video width="600" height="400" controls>
                            <source src="~/videos/capitulo01/tema01/seccion01/plinq.example.mp4" type="video/mp4">
                            Your browser does not support the video tag.
                        </video>
                        <br />
                        <br />
                        <li>
                            El método <code>AsParallel</code> examina el query para determinar si utilzar una ejecucion en paralelo
                            aumentará la velocidad de ejecución del query. Si este método (<code>AsParallel</code>) decide que es mejor
                            ejecutar el query de frorma paralela debido a que de esta forma se mejorará el performance de la aplicación,
                            entonces, el query será partido en un número de procesos los cuales serán ejecutados de manera concurrente.
                        </li>
                        <li>
                            Si <code>AsParallel</code> no puede determinar que un query ejecutado de forma paralela aumentará el rendimiento
                            de la aplicación, el query no será ejecutado en forma paralela.
                        </li>
                    </ul>
                    <h6>Informando sobre paralelización</h6>
                    <ul>
                        <li>
                            Los programas pueden usar otras llamadas a métodos para informar más sobre el proceso de paralelización,
                            como se muestra en el Listado 1-6.
                        </li>
                        <br />
                        <span class="badge badge-secondary">Listado 1-6</span>&nbsp;Paralelización informativa
                        <hr>
<pre>
using System;
using System.Linq;

namespace LISTING_1_6_A_informing_parallelization
{
    class Program
    {
        class Person
        {
            public string Name { get; set; }
            public string City { get; set; }
        }

        static void Main(string[] args)
        {
            Person[] people = new Person[]
            {
                new Person { Name = "Alan", City = "Hull" },
                new Person { Name = "Beryl", City = "Seattle" },
                new Person { Name = "Charles", City = "London" },
                new Person { Name = "David", City = "Seattle" },
                new Person { Name = "Eddy", City = "Paris" },
                new Person { Name = "Fred", City = "Berlin" },
                new Person { Name = "Gordon", City = "Hull" },
                new Person { Name = "Henry", City = "Seattle" },
                new Person { Name = "Isaac", City = "Seattle" },
                new Person { Name = "James", City = "London" }
            };

                        <b>var result = from person in people.AsParallel().
                        WithDegreeOfParallelism(4).
                        WithExecutionMode(ParallelExecutionMode.ForceParallelism)
                                            where person.City == "Seattle"
                                            select person;</b>

            foreach (var person in result)
                Console.WriteLine(person.Name);

            Console.WriteLine("Finished processing. Press a key to end.");
            Console.ReadKey();
        }
    }
}
</pre>
                        <video width="600" height="400" controls>
                            <source src="~/videos/capitulo01/tema01/seccion01/informing.parallelization.mp4" type="video/mp4">
                            Your browser does not support the video tag.
                        </video>
                        <br />
                        <br />
                        <li>
                            Esta llamada de <code>AsParallel</code> solicita que la consulta se paralelice si el rendimiento mejora o no,
                            con la solicitud de que la consulta se ejecute en un máximo de cuatro procesadores.
                        </li>
                        <li>
                            La consulta no paralela produce datos de salida que tienen el mismo orden que los datos de
                            entrada. Sin embargo, una consulta paralela puede procesar datos en un orden diferente de los datos de entrada.
                        </li>
                        <li>
                            Si es importante preservar el orden de los datos originales, se puede usar el método
                            <code>AsOrdered</code> para solicitar esto desde la consulta (ver Listado 1-7).
                        </li>
                        <br />
                        <span class="badge badge-secondary">Listado 1-7</span>&nbsp;Uso de
                        <code>AsOrdered</code> para preservar el orden de los datos
                        <hr>
<pre>
using System;
using System.Linq;

namespace LISTING_1_7_using_asOrdered
{
    class Program
    {
        class Person
        {
            public string Name { get; set; }
            public string City { get; set; }
        }

        static void Main(string[] args)
        {
            Person[] people = new Person[]
            {
                new Person { Name = "Alan", City = "Hull" },
                new Person { Name = "Beryl", City = "Seattle" },
                new Person { Name = "Charles", City = "London" },
                new Person { Name = "David", City = "Seattle" },
                new Person { Name = "Eddy", City = "Paris" },
                new Person { Name = "Fred", City = "Berlin" },
                new Person { Name = "Gordon", City = "Hull" },
                new Person { Name = "Henry", City = "Seattle" },
                new Person { Name = "Isaac", City = "Seattle" },
                new Person { Name = "James", City = "London" }
            };

                        <b>var result = from person in people.AsParallel().AsOrdered()
                            where person.City == "Seattle"
                            select person;</b>

            foreach (var person in result)
                Console.WriteLine(person.Name);

            Console.WriteLine("Finished processing. Press a key to end.");
            Console.ReadKey();
        }
    }
}
</pre>
                        <video width="600" height="400" controls>
                            <source src="~/videos/capitulo01/tema01/seccion01/using.asordered.mp4" type="video/mp4">
                            Your browser does not support the video tag.
                        </video>
                        <br />
                        <br />
                        <li>
                            El método <code>AsOrdered</code> no evita la paralelización de la consulta, sino que organiza la salida
                            de manera que esté en el mismo orden que los datos originales. Esto puede ralentizar la consulta.
                        </li>
                        <li>
                            Otro problema que puede surgir es que la naturaleza paralela de una consulta puede eliminar el
                            orden de una consulta compleja.
                        </li>
                        <li>
                            El método <code>AsSequential</code> se puede usar para identificar partes de una consulta que deben ejecutarse
                            secuencialmente (consulte el Listado 1-8).
                        </li>
                        <li>
                            <code>AsSequential</code> ejecuta la consulta en orden, mientras que <code>AsOrdered</code> devuelve un resultado ordenado
                            pero no necesariamente ejecuta la consulta en orden.
                        </li>
                        <br />
                        <span class="badge badge-secondary">Listado 1-8</span>&nbsp;Identificando elementos de una consulta paralela como secuenciales
                        <hr>
<pre>
var result = (from person in people.AsParallel()
        where person.City == "Seattle"
        orderby (person.Name)
        select new { Name = person.Name })
                        <b>.AsSequential().Take(4);</b>
</pre>
                        <li>
                            La consulta en el Listado 1-8 recupera los nombres de las primeras cuatro personas que viven en
                            Seattle. La consulta solicita que el resultado se ordene por nombre de persona, y este orden se
                            conserva mediante el uso de <code>AsSequential</code> antes de <code>Take</code>, que elimina a las
                            cuatro personas. Si la toma se ejecuta en paralelo, puede interrumpir el orden del resultado.
                        </li>
                    </ul>
                    <h6>Iterar elementos de una consulta utilizando <code>ForAll</code></h6>
                    <ul>
                        <li>
                            El método <code>ForAll</code> se puede usar para recorrer en iteración todos los elementos de una consulta.
                            Se diferencia de la construcción <code>foreach</code> de C# en que la iteración se lleva a cabo en paralelo
                            y comenzará antes de que se complete la consulta (consulte el Listado 1-9).
                        </li>
                        <br />
                        <span class="badge badge-secondary">Listado 1-9</span>&nbsp;Utilizando el método
                        <code>ForAll</code>
                        <hr>
<pre>
var result = from person in
        people.AsParallel()
        where person.City == "Seattle"
        select person;

<b>result.ForAll(person => Console.WriteLine(person.Name));</b>
</pre>
                        <video width="600" height="400" controls>
                            <source src="~/videos/capitulo01/tema01/seccion01/forall.mp4" type="video/mp4">
                            Your browser does not support the video tag.
                        </video>
                        <br />
                        <br />
                        <li>
                            La naturaleza paralela de la ejecución de <code>ForAll</code> significa que el orden de la salida
                            no reflejará el orden de los datos de entrada.
                        </li>
                    </ul>
                    <h6>Excepciones en consultas</h6>
                    <ul>
                        <li>
                            Es posible que los elementos de una consulta puedan generar excepciones en la ejecución de un código.
                        </li>
                        <br />
                        <span class="badge badge-secondary">Listado 1-10</span>&nbsp;Excepciones en consultas
                        <code>PLINQ</code>
                        <hr>
<pre>
using System;
using System.Linq;

namespace LISTING_1_10_exceptions_in_queries
{
    class Program
    {
        class Person
        {
            public string Name { get; set; }
            public string City { get; set; }
        }

        public static bool CheckCity(string name)
        {
            if (name == "")
                throw new ArgumentException(name);
            return name == "Seattle";
        }

        static void Main(string[] args)
        {
            Person[] people = new Person[]
            {
                new Person { Name = "Alan", City = "Hull" },
                new Person { Name = "Beryl", City = "Seattle" },
                new Person { Name = "Charles", City = "London" },
                new Person { Name = "David", City = "Seattle" },
                new Person { Name = "Eddy", City = "Paris" },
                new Person { Name = "Fred", City = "Berlin" },
                new Person { Name = "Gordon", City = "Hull" },
                new Person { Name = "Henry", City = "Seattle" },
                new Person { Name = "Isaac", City = "Seattle" },
                new Person { Name = "James", City = "London" }
            };

            try
            {
                var result = from person in
                    people.AsParallel()
                                where CheckCity(person.City)
                                select person;

                result.ForAll(person => Console.WriteLine(person.Name));
            }
                        <b>catch (AggregateException e)
            {
                Console.WriteLine(e.InnerExceptions.Count + " exceptions.");
            }</b>

            Console.WriteLine("Finished processing. Press a key to end.");
            Console.ReadKey();
        }
    }
}
</pre>
                        <video width="600" height="400" controls>
                            <source src="~/videos/capitulo01/tema01/seccion01/exceptions.in.queries.mp4" type="video/mp4">
                            Your browser does not support the video tag.
                        </video>
                        <br />
                        <br />
                        <li>
                            Si alguna consulta genera excepciones, se generará una excepción de tipo
                            <code>AggregateException</code> cuando se complete la consulta.
                            Esta contiene una lista de tipo <code>InnerExceptions</code>, de las excepciones que se lanzaron
                            durante la consulta.
                        </li>
                    </ul>
                    <h5>Tareas</h5>
                    <ul>
                        <li>
                            Las herramientas de paralelización cubiertas en este capítulo hasta ahora han operado a un nivel
                            muy alto de abstracción. Se han creado tareas, pero el código no ha interactuado con ellas
                            directamente. Ahora consideremos cómo crear y administrar tareas.
                        </li>
                    </ul>
                    <h6>Creando tareas</h6>
                    <ul>
                        <li>
                            El código del listado 1-11 crea una tarea, inicia su ejecución y luego espera a que esta sea complete.
                        </li>
                        <br />
                        <span class="badge badge-secondary">Listado 1-11</span>&nbsp;Crear una tarea
                        <hr>
<pre>
using System;
using System.Threading;
using System.Threading.Tasks;

namespace LISTING_1_11_Create_a_task
{
    class Program
    {
        public static void DoWork()
        {
            Console.WriteLine("Work starting");
            Thread.Sleep(2000);
            Console.WriteLine("Work finished");
        }
        
        static void Main(string[] args)
        {
            Task newTask = new Task(() => DoWork());
            newTask.Start();
            newTask.Wait();
        }
    }
}
</pre>
                        <video width="600" height="400" controls>
                            <source src="~/videos/capitulo01/tema01/seccion01/create_a_task.mp4" type="video/mp4">
                            Your browser does not support the video tag.
                        </video>
                        <br />
                        <br />
                        <li>
                            Una tarea tambien puede crearse y ejecutarse utilizando un simple método llamado <code>Run</code>,
                            tal y como se muestra en el listado 1-12.
                        </li>
                        <br />
                        <span class="badge badge-secondary">Listado 1-12</span>&nbsp;Ejecutar una tarea
                        <hr>
<pre>
static void Main(string[] args)
{
    Task newTask = Task.Run(() => DoWork());
    newTask.Wait();
}
</pre>
                        <li>
                            Su aplicación puede usar tareas de esta manera si solo desea comenzar las tareas y hacer que se ejecuten hasta su finalización.
                        </li>
                    </ul>
                    <h6>Regresando un valor desde una tarea</h6>
                    <ul>
                        <li>
                            Se puede crear una tarea que devolverá un valor, como se muestra en el Listado 1-13, donde la tarea devuelve un entero.
                            Tenga en cuenta que el programa esperará a que la tarea regrese el resultado cuando se lea la propiedad <code>Result</code> de la
                            instancia de la tarea.
                        </li>
                        <br />
                        <span class="badge badge-secondary">Listado 1-13</span>&nbsp;Tareas que retornan un valor
                        <hr>
<pre>
using System;
using System.Threading;
using System.Threading.Tasks;

namespace LISTING_1_13_Task_returning_a_value
{
    class Program
    {
        public static int CalculateResult()
        {
            Console.WriteLine("Work starting");
            Thread.Sleep(2000);
            Console.WriteLine("Work finished");
            return 99;
        }
        
        static void Main(string[] args)
        {
                        <b>Task&ltint> task = Task.Run(() =>
            { return CalculateResult(); });</b>

            Console.WriteLine(task.Result);
            Console.WriteLine("Finished processing. Press a key to end.");
            Console.ReadKey();
        }
    }
}
</pre>
                        <video width="600" height="400" controls>
                            <source src="~/videos/capitulo01/tema01/seccion01/task_returning_a_value.mp4" type="video/mp4">
                            Your browser does not support the video tag.
                        </video>
                        <br />
                        <br />
                        <li>
                            Como se puede observar, no es necesario agregar el método <code>Wait()</code> para que el programa espere por el resultado de la tarea.
                        </li>
                        <li>
                            El método <code>Task.Run</code> usa el método <code>TaskFactory.StartNew</code> para crear e iniciar la tarea,
                            usando el programador de tareas predeterminado que usa el grupo de subprocesos de .NET Framework.
                            La clase <code>Task</code> expone una propiedad <code>Factory</code> que se refiere al programador de tareas
                            predeterminado.
                        </li>
                    </ul>
                    <h6>Esperar a que se completen las tareas</h6>
                    <ul>
                        <li>
                            El método <code>Task.Waitall</code> se puede usar para pausar un programa hasta que se hayan completado varias
                            tareas, como se muestra en el Listado 1-14.
                        </li>
                        <br />
                        <span class="badge badge-secondary">Listado 1-14</span>&nbsp;Ejemplo de
                        <code>Task.Waitall</code>
                        <hr>
<pre>
using System;
using System.Threading;
using System.Threading.Tasks;

namespace LISTING_1_14_Task_waitall
{
    class Program
    {
        public static void DoWork(int i)
        {
            Console.WriteLine("Task {0} starting",i );
            Thread.Sleep(2000);
            Console.WriteLine("Task {0} finished", i);
        }

        static void Main(string[] args)
        {
            Task [] Tasks = new Task[10];
            for (int i = 0; i < 10; i++)
            {
                // make a local copy of the loop counter so that the
                // correct task number is passed into the lambda expression
                int taskNum = i; 
                Tasks[i] = Task.Run( () => DoWork(taskNum) ) ;
            }
                        <b>Task.WaitAll(Tasks);</b>

            Console.WriteLine("Finished processing. Press a key to end.");
            Console.ReadKey();
        }
    }
}
</pre>
                        <video width="600" height="400" controls>
                            <source src="~/videos/capitulo01/tema01/seccion01/task_waitall.mp4" type="video/mp4">
                            Your browser does not support the video tag.
                        </video>
                        <br />
                        <br />
                        <li>
                            Este listado también ilustra un problema adicional con el uso de variables de control de bucle
                            cuando se pasan a expresiones lambda. El contador del bucle se copia en una variable local
                            llamada <code>taskNum</code> en el bucle que crea cada tarea. Si la variable i se usara directamente
                            en la expresión lambda, todas las tareas tendrían el número 10, que es el valor del límite del bucle.
                        </li>
                        <li>
                            Otro uso para <code>Task.Waitall</code> es proporcionar un lugar donde un programa pueda detectar cualquier excepción
                            que puedan generar las tareas. Tenga en cuenta que, como con las excepciones generadas por las consultas
                            PLINQ, las excepciones se agregan.
                        </li>
                        <li>
                            Puede usar <code>Task.WaitAny</code> para hacer una pausa en el programa hasta que se complete cualquiera de varias tareas
                            concurrentes. Si piensas en cada tarea como un caballo en una carrera; <code>WaitAll</code> hará una pausa hasta que todos
                            los caballos hayan terminado de correr, mientras que <code>WaitAny</code> hará una pausa hasta que el primer caballo haya
                            terminado de correr. De la misma manera que los caballos aún corren después de que el ganador haya terminado, algunas
                            tareas continuarán ejecutándose después de que una llamada <code>WaitAny</code> haya regresado.
                        </li>
                    </ul>
                    <h5>Tareas de continuación</h5>
                    <ul>
                        <li>
                            Se puede nominar una tarea de continuación para comenzar cuando finaliza una tarea existente (la tarea antecedente).
                            Si la tarea antecedente produce un resultado, se puede suministrar como entrada para la tarea de continuación.
                            Las tareas de continuación se pueden utilizar para crear una "tubería" de operaciones, con cada etapa sucesiva comenzando cuando termina la anterior.
                        </li>
                    </ul>
                    <h6>Crear una tarea de continuación</h6>
                    <ul>
                        <li>
                            El Listado 1-15 muestra cómo se puede crear una tarea de continuación a partir de una tarea.
                            Un objeto Task expone un método ContinueWith que se puede usar para especificar una tarea de continuación.
                            La expresión lambda que ejecuta la tarea de continuación se proporciona con una referencia a la tarea antecedente, que puede usar para determinar si el antecedente se completó con éxito.
                            Puede agregar tareas de continuación a las tareas que entregan un resultado, en cuyo caso la tarea de continuación puede usar la propiedad Resultado de la tarea antecedente para obtener sus datos de entrada.
                        </li>
                    </ul>
                </p>
            </div>
        </div>
    </div>
</div>